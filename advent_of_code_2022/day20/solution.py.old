#!/usr/bin/env python
# -*- coding:utf-8 -*-
"""
Advent of code 2022 - Day 20
"""

import argparse
from copy import deepcopy
# import numpy as np


def get_args():
    """
    Cmd line argument parsing (preprocessing)
    """
    # Assign description to the help doc
    parser = argparse.ArgumentParser(
        description='Advent of code 2022: Day 20')

    # Add arguments
    parser.add_argument(
        '-i',
        '--infile',
        type=str,
        help='Inputfilename',
        required=True)

    # Array for all arguments passed to script
    args = parser.parse_args()

    # Return arg variables
    return args.infile


def parse_input(lines):
    """
    Preprocess input
    """
    data = []
    for line in lines:
        data.append(int(line))
    return data


def solve_part1(data, key, repetition):
    """
    decrypt
    """
#    print(data)
    # transform to structure
    numbers = []
    trans = {}
    zeropos = None
    for idx, number in enumerate(data):
        next_item = (idx + 1) % len(data)
        prev_item = (len(data) + idx - 1) % len(data)
        numbers.append({'value': number * key, 'next_item': next_item, 'prev_item': prev_item})
	trans[idx] = idx
        if number == 0:
            zeropos = idx
    # perform mixing
    idx = 0
    while idx < len(numbers):
        # move idx-th item
        source_index = idx
        value = numbers[source_index]['value']
        # no move for zero value
        idx += 1
        if value == 0:           
            continue
        # take out from list
        numbers[numbers[source_index]['next_item']]['prev_item'] = numbers[source_index]['prev_item']
        numbers[numbers[source_index]['prev_item']]['next_item'] = numbers[source_index]['next_item']
        # find position to put in
        target_index = source_index
        if value < 0:
            jdx = 0
            while jdx <= (-1 * value) % (len(numbers) - 1):
                jdx += 1
                target_index = numbers[target_index]['prev_item']
        else:
            jdx = 0
            while jdx < value % (len(numbers) - 1):
                jdx += 1
                target_index = numbers[target_index]['next_item']

        #target_index = (source_index + numbers[source_index]['value'] + 10*len(numbers)) % len(numbers)
#        print(f'idx={idx}, source_index={source_index}, shift by {numbers[source_index]["value"]},  target_index={target_index}')
        # add to list after target
        numbers[source_index]['prev_item'] = target_index
        numbers[source_index]['next_item'] = numbers[target_index]['next_item']
        numbers[numbers[source_index]['prev_item']]['next_item'] = source_index
        numbers[numbers[source_index]['next_item']]['prev_item'] = source_index
#        print(f"res in iteration {idx}")
#        for num in numbers:
#           print(num)
    pos = zeropos
    jdx = 0
    while jdx < 7:
        print(numbers[pos]['value'], end=', ')
        pos = numbers[pos]['next_item']
        jdx +=1
    print('\n')
#        if idx == 3:
#            break

    pos = zeropos
    jdx = 0
    sums = 0
    while jdx <= 3000:
#        print(numbers[pos]['value'], end=', ')
        pos = numbers[pos]['next_item']
        jdx +=1
        if (jdx) % 1000 == 0:
            print(jdx, numbers[pos]['value'])
            sums +=  numbers[pos]['value']
    return sums



def main():
    """
    Main function
    """

    # process args
    infile = get_args()

    # read data
    data = []
    with open(infile, "r") as fileh:
        data = fileh.readlines()
    lines = [x.strip() for x in data]

    # preprocess data
    data = parse_input(lines)

    # part 1
    res = solve_part1(data, 1, 1)
    print(f"Part 1 solution: {res}")

    # part 2
    res = solve_part1(data, 811589153, 10)
    print(f"Part 2 solution: {res}")


if __name__ == '__main__':
    main()

# EOF
